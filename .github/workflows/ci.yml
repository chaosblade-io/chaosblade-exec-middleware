name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: ${{ matrix.os }} - ${{ matrix.arch }} - Go ${{ matrix.go_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go_version:
          - "1.20"
        os:
          - ubuntu-latest
          - macos-latest
        arch:
          - amd64
          - arm64
        include:
          # Ubuntu supports both architectures
          - os: ubuntu-latest
            arch: amd64
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            arch: arm64
            goos: linux
            goarch: arm64
          # macOS supports both architectures
          - os: macos-latest
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: macos-latest
            arch: arm64
            goos: darwin
            goarch: arm64

    steps:
      - name: Set Up Go ${{ matrix.go_version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go_version }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的Git历史和tags

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
          make build

      - name: Run Tests
        run: |
          echo "Running tests..."
          make test

      - name: Verify Build Artifacts
        run: |
          echo "Verifying build artifacts for ${{ matrix.goos }}/${{ matrix.goarch }}..."
          
          # Check if target directory exists
          if [ ! -d "target" ]; then
            echo "❌ Target directory not found"
            exit 1
          fi
          
          # Look for the specific build directory
          BUILD_DIR=$(find target/ -type d -name "chaosblade-*-${{ matrix.goos }}_${{ matrix.goarch }}" | head -1)
          
          if [ -z "$BUILD_DIR" ]; then
            echo "❌ Build directory not found for ${{ matrix.goos }}/${{ matrix.goarch }}"
            echo "Available directories:"
            ls -la target/ || echo "No target directory"
            exit 1
          fi
          
          echo "✅ Found build directory: $BUILD_DIR"
          
          # Check binary file
          if [ -f "$BUILD_DIR/bin/chaos_middleware" ]; then
            echo "✅ Binary file exists"
            ls -la "$BUILD_DIR/bin/"
          else
            echo "❌ Binary file not found in $BUILD_DIR/bin/"
            ls -la "$BUILD_DIR/" || echo "Build directory is empty"
            exit 1
          fi
          
          # Check YAML file
          if ls "$BUILD_DIR/yaml/chaosblade-middleware-spec-"*.yaml >/dev/null 2>&1; then
            echo "✅ YAML specification file exists"
            ls -la "$BUILD_DIR/yaml/"
          else
            echo "❌ YAML specification file not found in $BUILD_DIR/yaml/"
            ls -la "$BUILD_DIR/" || echo "Build directory is empty"
            exit 1
          fi

      - name: Show Build Summary
        run: |
          echo "=== Build Summary ==="
          echo "OS: ${{ matrix.os }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "Go Version: ${{ matrix.go_version }}"
          echo "Target Platform: ${{ matrix.goos }}/${{ matrix.goarch }}"
          
          if [ -d "target" ]; then
            echo "Build Artifacts:"
            find target/ -type d -name "chaosblade-*" | sort
          fi
